Verification
----------------------

[x] If the first event with a LC-value of 1 can either be an internal or send event.
[x] If the first event with a LC-value greater than 1 is a receive event.
[ ] In the same process, if not the first event with a LC-value minus the previous LC-value = 1 can either be an internal or send event.
[ ] Not in the same process, if not the first event with a LC-value minus the previous LC-value = 1 can be receive event.

*Priority queue to keep track of the receive (deadend) events.
*A counter to index the number of send/receive events.
*previousValue for the last-awakened greatest LC value.
*process cannot broadcast to itself.

[]To keep track of the previous value for receive events:
- Create a previous variable that will contain the last awakened processor's LC value which is the last-awakened greatest index.

[] To distinguish between an internal or send event:
- a different processor with a LC-value minus the previous send LC-value = 1. The calculation will change the previous event into a send event.


Stopping conditions:
[x]If the first event with a LC-value greater than 1. (Receive event)
[x]In the same process, if not the first event with a LC-value minus the previous LC-value > 1. (Receive event)
[x]If LC value is 0 then the event is an empty space or NULL.
[x]Iterating till the end

If all threads are sleeping, then the front of the priority queue and the last previous LC value will be evaluated.

If sucessfully evaluated then the front of the priority queue will be popped and the thread with corresponding receive will execute.

Also, the last-awakened greatest index will transform from internal event to a send event.

Incorrect sequences:
If all of the initiators only have receive events.
If no receive LC-value minus previous value LC-value = 1 exists.
*this will get rid of receive events that dont have send events.
