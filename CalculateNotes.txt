----------------------Calculate-------------------------------
-Conditions
[x] 1. If a is the first event and is an internal or send event, then LC(a) = 1.
[x] 2. If a is the first event and is a receive event, then LC(a) = k + 1 where k is the LC-value of the send event corresponding to a (that has occurred at a process other than P).
[x]3. If a is not the first event and is an internal or send event, then  LC(a) = k + 1 where k is the LC-value of the event just before a at process P.
[x]4. If  a is not the first event and is a receive event, let b be the send event corresponding to a (that has occurred at a process other than P) and k be the clock value of the event just before a at process P. Then LC(a) = max{ k, LC(b) } + 1

// let a = events
//     T = terminal
//     S = send
//     R = receive

mutex mtx;
condition_variable cv; 

vector<pair<string,int>> send;
int max_sleeper = # of n;
int sleeper = max_sleeper;  

**Notes: 
-will account for the number of processors that needs to finish executing before joining all the processors together.
-if max_sleeper = 0 then all the threads can join and output the result.
-Find the max of both the corresponding LC(send) and the LC value before the receive event then add 1 and return it.

// helper function for condition 4
compareMax(sent, beforeRcv){
  if preceding clock value > corresponding send clock value
   return preceding clock value + 1
  else
   return the send LC value + 1  	  
}

//deadend == a thread with a receive event
calcUnlock(deadend){
  if earliest encountered send event == deadend
	decrement sleeper
	wake up the thread.
  else
	let the thread sleep.  
}

//a different sibling thread will supervise the other "processes"
CalcCheckpoint(){
  while there are threads still running
    if all threads are sleeping
      then wake all the threads up.
}

//input is the configuration which contains a list of events
//result contains the computed value will be stored here.
//i is the process id

calcLC(input, result, i){
   k = current clock value.
   loop through the input{
    if(receive event){
      sleeper++;
      put the thread to sleep.
	only wake up when sibling thread says so.
      k = compareMax(send clock value,  preceding clock value);
      pop the top of the send queue
      fill in the result with the receive clocks value 
    }
    else if(send event){
      fill in the result with the send clocks value.
      add the send event to the queue.
    }
    else if(terminal){
      fill in the result with the terminal clocks value.
    }
    else if(empty event){
      fill in the result with 0.
      stop the loop.
    }
  }
  //process is finish.
  max_sleeper--;
}



